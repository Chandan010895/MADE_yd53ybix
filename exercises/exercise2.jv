// This Jayvee pipeline processes a CSV file from a URL, 
// interpreting it and saving the results into a SQLite database.
pipeline TreesPipeline {

  // Sequence of blocks to process the data from extraction to loading
  TreesExtractor
    -> TreesTextFileInterpreter
    -> TreesCSVInterpreter
    -> TreesColumnDeleter
    -> TreesTableInterpreter
    -> TreesLoader;

  // Block for downloading the CSV file from a specified URL
  block TreesExtractor oftype HttpExtractor {
    url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
  }

  // Block to convert the downloaded binary data into text format
  block TreesTextFileInterpreter oftype TextFileInterpreter { }

  // Block for parsing the CSV text file into a sheet structure
  block TreesCSVInterpreter oftype CSVInterpreter {
     delimiter: ";"; // The columns are separated by semicolons
  }
  
  // Block to remove unnecessary columns from the dataset
  block TreesColumnDeleter oftype ColumnDeleter {
    delete: [column E]; // Deletes column E from the sheet
  }

  // User-defined value type for the 'stadtteil' column, with custom validation
  valuetype StadtteilVal oftype text {
    constraints: [ StadtteilFormat ];
  }
  
  // User-defined value type for 'id', representing geographical points
  valuetype GeopointVal oftype text {
    constraints: [ GeoFormat ];
  }

  // Regular expression constraint to validate 'stadtteil' values
  constraint StadtteilFormat oftype RegexConstraint {
    regex: /^Vogelsang(?:\s[\w-]+)*$/; 
    // Ensures the value starts with "Vogelsang" and is followed by optional words
  }

  // Regular expression constraint for validating geographical points in 'id' column
  constraint GeoFormat oftype RegexConstraint {
    regex: /^\d{1,3}\.\d+,\s\d{1,3}\.\d+$/; 
    // Matches a format like "lat,long" for coordinates
  }

  // Block that maps the sheet into a structured table format
  block TreesTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "lfd_nr" oftype integer,  // Sequential number
      "stadtteil" oftype StadtteilVal,  // Neighborhood name, validated against 'StadtteilFormat'
      "standort" oftype text,  // Location information
      "baumart_botanisch" oftype text,  // Botanical tree species
      "id" oftype GeopointVal,  // Geographical coordinates of the tree
      "baumfamilie" oftype text  // Tree family
    ];
  }

  // Final step to load the structured data into a SQLite database
  block TreesLoader oftype SQLiteLoader {
    table: "trees";
    file: "./trees.sqlite";  // Specifies the database file to store the data
  }

}
